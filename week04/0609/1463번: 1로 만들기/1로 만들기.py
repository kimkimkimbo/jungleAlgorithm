import sys

def make_one(N):
    # DP 배열 초기화
    # dp[i] = i를 1로 만드는 최소 연산 횟수
    dp = [0] * (N + 1)
    
    # 기저 사례: 1은 이미 1이므로 0번의 연산 필요
    dp[1] = 0
    
    # 2부터 N까지 차례대로 계산
    for i in range(2, N + 1):
        # 방법 1: i-1에서 1을 더해서 i를 만들기
        # 즉, i에서 1을 빼는 연산의 역방향
        dp[i] = dp[i-1] + 1
        
        # 방법 2: i가 2로 나누어떨어지는 경우
        # i/2에서 2를 곱해서 i를 만들기 (÷2 연산의 역방향)
        if i % 2 == 0:
            # 기존 방법과 새로운 방법 중 더 적은 연산 횟수 선택
            dp[i] = min(dp[i], dp[i//2] + 1)
        
        # 방법 3: i가 3으로 나누어떨어지는 경우  
        # i/3에서 3을 곱해서 i를 만들기 (÷3 연산의 역방향)
        if i % 3 == 0:
            # 기존 방법들과 새로운 방법 중 최소값 선택
            dp[i] = min(dp[i], dp[i//3] + 1)
    
    return dp[N]

# 입력 받기
N = int(input())

# 결과 출력
result = make_one(N)
print(result)